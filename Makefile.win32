CXXFLAGS += --std=c++11
ARFLAGS = rs

# Transform parallel LOG output into something more readable.
perl_command = perl -n \
  -e '@a=split("\t",$$_,-1); $$t=$$a[8]; $$t =~ s,^\./,,;'		\
  -e '$$t =~ s, >.*,,; chomp $$t;'					\
  -e '$$t =~ /.*--gtest_filter=(.*?\.[\w\/]+)/ and $$t=$$1;'		\
  -e 'printf "%7.3f %s %s\n", $$a[3], $$a[6] == 0 ? "PASS" : "FAIL", $$t'
quoted_perl_command = $(subst ','\'',$(perl_command))

OPT += -DOS_WIN -D_WIN32_WINNT=0x0601
DEBUG_LEVEL=0
OPT += -DNDEBUG
OPT += -O2 -fno-omit-frame-pointer
DISABLE_WARNING_AS_ERROR=1

#-----------------------------------------------
include src.mk

LIB_SOURCES_WIN = $(filter-out port/% %_posix.cc,$(LIB_SOURCES))

#$(error $(LIB_SOURCES_WIN))

LIB_SOURCES_WIN += port/win/env_win.cc                           \
  port/win/port_win.cc                                          \
  port/win/win_logger.cc

GTEST_DIR = ./third-party/gtest-1.7.0/fused-src

AM_DEFAULT_VERBOSITY = 0

AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 =
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 =

AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 =
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 =
AM_V_AR = $(am__v_AR_$(V))
am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))
am__v_AR_0 = @echo "  AR      " $@;
am__v_AR_1 =

AM_LINK = $(AM_V_CCLD)$(CXX) $^ $(EXEC_LDFLAGS) -o $@ $(LDFLAGS) $(COVERAGEFLAGS)

#the first rule
default: static_lib

WARNING_FLAGS = -W -Wextra -Wall -Wsign-compare -Wshadow \
  -Wno-unused-parameter

CFLAGS += $(WARNING_FLAGS) -I. -I./include -isystem $(GTEST_DIR) $(OPT)
CXXFLAGS += $(WARNING_FLAGS) -I. -I./include -isystem $(GTEST_DIR) $(OPT) -Woverloaded-virtual -Wnon-virtual-dtor -Wno-missing-field-initializers

date := $(shell date +%F)
git_sha := $(shell git rev-parse HEAD 2>/dev/null)
gen_build_version =							\
  printf '%s\n'								\
    '\#include "build_version.h"'					\
    'const char* rocksdb_build_git_sha =				\
      "rocksdb_build_git_sha:$(git_sha)";'			\
    'const char* rocksdb_build_git_date =				\
      "rocksdb_build_git_date:$(date)";'				\
    'const char* rocksdb_build_compile_date = __DATE__;'

CLEAN_FILES += util/build_version.cc:
FORCE:
util/build_version.cc: FORCE
	$(AM_V_GEN)rm -f $@-t
	$(AM_V_at)$(gen_build_version) > $@-t
	$(AM_V_at)if test -f $@; then					\
	  cmp -s $@-t $@ && rm -f $@-t || mv -f $@-t $@;		\
	else mv -f $@-t $@; fi

LIBOBJECTS = $(LIB_SOURCES_WIN:.cc=.o)
LIBOBJECTS += $(TOOL_SOURCES:.cc=.o)

GTEST = $(GTEST_DIR)/gtest/gtest-all.o
LIBOBJECTS += $(GTEST)

LIBNAME=librocksdb
LIBRARY = ${LIBNAME}.a

LDFLAGS += -lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32 -lshlwapi -lrpcrt4
SHARED = ${LIBNAME}.dll
SHARED_LIB = ${LIBNAME}_dll.a

$(SHARED): $(LIBOBJECTS)
	$(AM_V_CC)$(CXX) -shared $(CXXFLAGS) $(LIBOBJECTS) $(LDFLAGS) -Wl,--out-implib,$(SHARED_LIB) -o $@

.PHONY: static_lib shared_lib

static_lib: $(LIBRARY)

shared_lib: $(SHARED)

$(LIBRARY): $(LIBOBJECTS)
	$(AM_V_AR)rm -f $@
	$(AM_V_at)$(AR) $(ARFLAGS) $@ $(LIBOBJECTS)

.o:
	$(AM_V_CC)$(CXX) $(CXXFLAGS) -cs $< -o $@ 

all_sources = $(LIB_SOURCES) $(TOOL_SOURCES)
DEPFILES = $(all_sources:.cc=.d)

# Add proper dependency support so changing a .h file forces a .cc file to
# rebuild.

# The .d file indicates .cc file's dependencies on .h files. We generate such
# dependency by g++'s -MM option, whose output is a make dependency rule.
$(DEPFILES): %.d: %.cc
	@$(CXX) $(CXXFLAGS) $(PLATFORM_SHARED_CFLAGS) \
	  -MM -MT'$@' -MT'$(<:.cc=.o)' "$<" -o '$@'

depend: $(DEPFILES)

clean:
	rm -f $(LIBRARY) $(SHARED)
	find . -name "*.[oda]" -exec rm -f {} \;
	find . -type f -regex ".*\.\(\(gcda\)\|\(gcno\)\)" -exec rm {} \;
